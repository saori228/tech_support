1 вопрос.
Структура Laravel простыми словами

Как работает Laravel

Laravel - это как большой завод по обработке запросов от пользователей. Представь, что пользователь заходит на сайт и нажимает кнопку - запускается целая цепочка действий:

1. Маршруты (Routes) - Диспетчер

Это как диспетчер на заводе. Когда приходит запрос "покажи админ-панель", диспетчер смотрит в свою книгу маршрутов и говорит: "Ага, этот запрос нужно отправить к контроллеру AdminController".

2. Middleware - Охрана

Перед тем как запрос попадет к контроллеру, его проверяет охрана. Она спрашивает: "А ты вообще авторизован? А права у тебя есть на это действие?" Если что-то не так - запрос отклоняется.

3. Контроллер - Менеджер

Контроллер - это менеджер, который получает задачу и решает, что делать. Он может сказать: "Мне нужны данные о пользователях" и обращается к модели. Или "Покажи пользователю эту страницу" и вызывает представление.

4. Модель - Кладовщик

Модель знает, как работать с базой данных. Это как кладовщик, который знает, где что лежит на складе. Контроллер говорит: "Дай мне всех пользователей с ролью админ", а модель идет в базу данных и приносит эти данные.

5. View (Представление) - Дизайнер

Представление берет данные и красиво их оформляет для показа пользователю. Это как дизайнер, который берет сухие данные и делает из них красивую веб-страницу.

6. База данных - Склад

Это склад, где хранятся все данные: пользователи, их роли, обращения, сообщения и так далее.

2 вопрос.
Реляционные vs Нереляционные базы данных

Реляционные БД (SQL)

Представь библиотеку с каталогами:

- Данные хранятся в таблицах (как картотеки)
- У каждой таблицы есть строгая структура (колонки)
- Таблицы связаны между собой (как ссылки в каталоге)
- Пример: MySQL, PostgreSQL

Нереляционные БД (NoSQL)

Представь склад с коробками:

- Данные хранятся как документы (JSON-файлы)
- Гибкая структура - каждый документ может быть разным
- Нет жестких связей между данными
- Пример: MongoDB, Redis


3 вопрос
Прототип - Черновик
Макет - Чертеж

4 вопрос

Создание обращения в вашем проекте

Что происходит пошагово:

1. Пользователь заходит на форму создания

- Переходит по ссылке `/tickets/create`
- Laravel находит маршрут и вызывает `TicketController@create`
- Контроллер показывает форму для создания обращения


2. Пользователь заполняет форму и нажимает "Отправить"

- Браузер отправляет POST запрос на `/tickets`
- В форме есть CSRF токен для защиты


3. Laravel обрабатывает запрос

- Маршрутизатор находит маршрут `POST /tickets`
- Middleware проверяет:

- Авторизован ли пользователь
- Не является ли он администратором (restrict.admin)
- Правильный ли CSRF токен

4. Контроллер получает данные

- `TicketController@store` получает данные из формы
- Проверяет обязательные поля (название, описание)
- Если что-то не так - возвращает ошибки


5. Создание обращения в базе данных

- Контроллер создает новую запись в таблице `tickets`
- Автоматически добавляется:

- ID текущего пользователя
- Уникальный номер обращения
- Статус "В обработке" (ID = 1)
- Текущая дата создания

6. Возврат результата

- Если все успешно - пользователя перенаправляют на список обращений
- Показывается сообщение "Обращение создано успешно!"
- Если ошибка - возвращают на форму с описанием проблем




 Создание сообщений в чате

Что происходит пошагово:

1. Пользователь заходит в чат

- Переходит на `/chat`
- `ChatController@index` показывает интерфейс чата
- Загружаются предыдущие сообщения (если есть)


2. Пользователь пишет сообщение

- Вводит текст в поле для сообщения
- Может прикрепить файл (до 2MB)
- Нажимает "Отправить"


3. Laravel обрабатывает отправку

- POST запрос идет на `/chat`
- Middleware проверяет авторизацию
- `ChatController@store` получает данные


4. Определение получателя

Логика зависит от роли отправителя:

Если пишет обычный пользователь:

- Сообщение адресуется любому свободному сотруднику поддержки
- Или конкретному сотруднику, если уже была переписка


Если пишет сотрудник поддержки:

- Сообщение адресуется конкретному пользователю
- Сотрудник выбирает, кому отвечать


Сохранение в базу данных

- Создается запись в таблице `messages`
- Сохраняется:

- Текст сообщения
- ID отправителя (user_id)
- ID получателя (support_id)
- Время отправки
- Прикрепленный файл (если есть)


6. Обработка файлов

- Если есть файл - он сохраняется на сервер
- Проверяется размер (не больше 2MB)
- Проверяется тип файла (безопасность)
- Путь к файлу сохраняется в базе


7. Обновление интерфейса

- Страница перезагружается или обновляется
- Новое сообщение появляется в чате
- Показывается время отправки


6 вопрос

Типы связей:

1. Один ко многим (1:∞):

1. Одна роль → много пользователей
2. Один пользователь → много обращений
3. Один статус → много обращений
4. Один пользователь → много сообщений



2. Многие к одному (∞:1):

1. Много пользователей → одна роль
2. Много обращений → один пользователь
3. Много сообщений → один отправитель



3.Самосвязь в messages:

1. `user_id` и `support_id` ссылаются на одну таблицу `users`
2. Это позволяет пользователям писать друг другу